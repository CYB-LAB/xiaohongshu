<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.itpractice.xiaohongshu.data.align.domain.mapper.SelectMapper">

    <select id="selectBatchFromDataAlignFollowingCountTempTable" resultType="long" parameterType="map">
        select user_id from `t_data_align_following_count_temp_${tableNameSuffix}` order by id
        limit #{batchSize}
    </select>

    <select id="selectCountFromFollowingTableByUserId" parameterType="map" resultType="int">
        select count(*) from t_following where user_id = #{userId}
    </select>
    <select id="selectBatchFromDataAlignNoteLikeCountTempTable" resultType="java.lang.Long" parameterType="map">
        select note_id from `t_data_align_note_like_count_temp_${tableNameSuffix}` order by id
        limit #{batchSize}
    </select>
    <select id="selectCountFromNoteLikeTableByUserId" parameterType="map" resultType="int">
        select count(*) from t_note_like where note_id = #{noteId} and status = 1
    </select>
    <select id="selectBatchFromDataAlignNotePublishCountTempTable" resultType="java.lang.Long" parameterType="map">
        select user_id from `t_data_align_note_publish_count_temp_${tableNameSuffix}` order by id
        limit #{batchSize}
    </select>
    <select id="selectCountFromNoteTableByUserId" resultType="java.lang.Integer">
        select count(*) from t_note where creator_id = #{userId}
    </select>
    <select id="selectBatchFromDataAlignUserCollectCountTempTable" resultType="java.lang.Long" parameterType="map">
        select user_id from `t_data_align_user_collect_count_temp_${tableNameSuffix}` order by id
        limit #{batchSize}
    </select>
    <select id="selectUserCollectCountFromNoteCollectionTableByUserId" resultType="java.lang.Integer" parameterType="map">
        select count(*) from t_note_collection where status = 1 and note_id in (
            select note_id from t_note where creator_id = #{userId}
            )
    </select>
    <select id="selectBatchFromDataAlignUserLikeCountTempTable" resultType="java.lang.Long" parameterType="map">
        select user_id from `t_data_align_user_like_count_temp_${tableNameSuffix}` order by id
        limit #{batchSize}
    </select>
    <select id="selectUserCountFromNoteLikeTableByUserId" resultType="java.lang.Integer" parameterType="map">
        select count(*) from t_note_like where status = 1 and note_id in (
            select note_id from t_note where creator_id = #{userId}
            )
    </select>
    <select id="selectBatchFromDataAlignFansCountTempTable" resultType="java.lang.Long" parameterType="map">
        select user_id from `t_data_align_fans_count_temp_${tableNameSuffix}` order by id
        limit #{batchSize}
    </select>
    <select id="selectCountFromFansTableByUserId" resultType="java.lang.Integer" parameterType="map">
        select count(*) from t_fans where user_id = #{userId}
    </select>
    <select id="selectBatchFromDataAlignNoteCollectCountTempTable" resultType="java.lang.Long" parameterType="map">
        select note_id from `t_data_align_note_collect_count_temp_${tableNameSuffix}` order by id
        limit #{batchSize}
    </select>
    <select id="selectNoteCollectCountFromNoteCollectionTableByNoteId" resultType="java.lang.Integer" parameterType="map">
        select count(*) from t_note_collection where status = 1 and note_id = #{noteId}
    </select>
    <select id="selectPendingMessages"
            resultType="com.itpractice.xiaohongshu.data.align.domain.dataobject.MqFailedMessageDO">
        select id,
               topic,
               message_body    AS messageBody,
               status,
               retry_count     AS retryCount,
               max_retry_times AS maxRetryTimes,
               next_retry_time AS nextRetryTime,
               create_time     AS createTime,
               update_time     AS updateTime,
               error_msg       AS errorMsg
        from t_mq_failed_message
        where status = 0
          and next_retry_time &lt;= #{currentTime}
        order by next_retry_time
        limit #{batchSize}
    </select>

</mapper>
